// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a.proto

#ifndef PROTOBUF_INCLUDED_a_2eproto
#define PROTOBUF_INCLUDED_a_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_a_2eproto 

namespace protobuf_a_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_a_2eproto
namespace Xpb {
class TB;
class TBDefaultTypeInternal;
extern TBDefaultTypeInternal _TB_default_instance_;
class Test;
class TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
}  // namespace Xpb
namespace google {
namespace protobuf {
template<> ::Xpb::TB* Arena::CreateMaybeMessage<::Xpb::TB>(Arena*);
template<> ::Xpb::Test* Arena::CreateMaybeMessage<::Xpb::Test>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Xpb {

// ===================================================================

class TB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Xpb.TB) */ {
 public:
  TB();
  virtual ~TB();

  TB(const TB& from);

  inline TB& operator=(const TB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TB(TB&& from) noexcept
    : TB() {
    *this = ::std::move(from);
  }

  inline TB& operator=(TB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TB* internal_default_instance() {
    return reinterpret_cast<const TB*>(
               &_TB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TB* other);
  friend void swap(TB& a, TB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TB* New() const final {
    return CreateMaybeMessage<TB>(NULL);
  }

  TB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TB& from);
  void MergeFrom(const TB& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 haha = 1;
  void clear_haha();
  static const int kHahaFieldNumber = 1;
  ::google::protobuf::int32 haha() const;
  void set_haha(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Xpb.TB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 haha_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_a_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Xpb.Test) */ {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test(Test&& from) noexcept
    : Test() {
    *this = ::std::move(from);
  }

  inline Test& operator=(Test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Test* other);
  friend void swap(Test& a, Test& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test* New() const final {
    return CreateMaybeMessage<Test>(NULL);
  }

  Test* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Test>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .Xpb.TB b = 2;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 2;
  private:
  const ::Xpb::TB& _internal_b() const;
  public:
  const ::Xpb::TB& b() const;
  ::Xpb::TB* release_b();
  ::Xpb::TB* mutable_b();
  void set_allocated_b(::Xpb::TB* b);

  // @@protoc_insertion_point(class_scope:Xpb.Test)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Xpb::TB* b_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_a_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TB

// int32 haha = 1;
inline void TB::clear_haha() {
  haha_ = 0;
}
inline ::google::protobuf::int32 TB::haha() const {
  // @@protoc_insertion_point(field_get:Xpb.TB.haha)
  return haha_;
}
inline void TB::set_haha(::google::protobuf::int32 value) {
  
  haha_ = value;
  // @@protoc_insertion_point(field_set:Xpb.TB.haha)
}

// -------------------------------------------------------------------

// Test

// string name = 1;
inline void Test::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Test::name() const {
  // @@protoc_insertion_point(field_get:Xpb.Test.name)
  return name_.GetNoArena();
}
inline void Test::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Xpb.Test.name)
}
#if LANG_CXX11
inline void Test::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Xpb.Test.name)
}
#endif
inline void Test::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Xpb.Test.name)
}
inline void Test::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Xpb.Test.name)
}
inline ::std::string* Test::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Xpb.Test.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test::release_name() {
  // @@protoc_insertion_point(field_release:Xpb.Test.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Xpb.Test.name)
}

// .Xpb.TB b = 2;
inline bool Test::has_b() const {
  return this != internal_default_instance() && b_ != NULL;
}
inline void Test::clear_b() {
  if (GetArenaNoVirtual() == NULL && b_ != NULL) {
    delete b_;
  }
  b_ = NULL;
}
inline const ::Xpb::TB& Test::_internal_b() const {
  return *b_;
}
inline const ::Xpb::TB& Test::b() const {
  const ::Xpb::TB* p = b_;
  // @@protoc_insertion_point(field_get:Xpb.Test.b)
  return p != NULL ? *p : *reinterpret_cast<const ::Xpb::TB*>(
      &::Xpb::_TB_default_instance_);
}
inline ::Xpb::TB* Test::release_b() {
  // @@protoc_insertion_point(field_release:Xpb.Test.b)
  
  ::Xpb::TB* temp = b_;
  b_ = NULL;
  return temp;
}
inline ::Xpb::TB* Test::mutable_b() {
  
  if (b_ == NULL) {
    auto* p = CreateMaybeMessage<::Xpb::TB>(GetArenaNoVirtual());
    b_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Xpb.Test.b)
  return b_;
}
inline void Test::set_allocated_b(::Xpb::TB* b) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete b_;
  }
  if (b) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      b = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    
  } else {
    
  }
  b_ = b;
  // @@protoc_insertion_point(field_set_allocated:Xpb.Test.b)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Xpb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_a_2eproto
