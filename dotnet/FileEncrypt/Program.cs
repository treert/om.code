using om.utils;
using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;

/// <summary>
/// 扩展阅读 https://stackoverflow.com/questions/23481181/whats-the-algorithm-used-in-net-to-generate-random-numbers
/// </summary>
namespace FileEncrypt
{
    [Option("filepkg", tip = "Test command")]
    class TestCmd : CmdLine.ICmd
    {
        byte[] s_buffer = new byte[4096];// 这个4096是不能改的，不然解密失败
        // DotNet 不保证Random在不同版本会保持一致，这儿写死好了。原先用的Random(123)
        static readonly IReadOnlyList<byte> R123Keys = new byte[4096] {
  3,225,225,170,165,188,161,159,186,140, 66,  5,139, 74,191, 40,150, 57,236, 13,252, 45,178,124,233,116,142, 95,185,243,153,206,
225, 26, 92, 81,163, 29,215, 27, 21,140,173,166,175, 99, 13,140, 26,241, 58, 53,140,202, 63,214, 47,101,193, 49, 45, 65,229,199,
243,116, 35,113,237,109,132,121, 97,208,248,111,127, 12,204,134,103,  2, 69,200,184,100, 66, 23,218,133, 33, 62, 92,166,238,212,
167,230,179, 59, 63,156,158,172,108,193,211,187,210,208, 87, 34,153, 58,201, 43,251, 29, 14,142, 49, 12,150,104, 76, 70, 29,187,
225, 35,200,153, 89,144, 71,203, 99,153, 91,247,145,135, 68,  9, 46,255,164, 33,220,195,217,137,215, 36, 10, 50,  5, 54, 96, 37,
164, 23,218,175,  8,190,201,  8,243,254,199, 97,194, 23,253,170,199,141, 58, 76,162,251,222, 30, 73, 62,193, 52,134, 20,198, 45,
 57, 53, 82,121,173,149,  1,111, 54,155, 46,222,252,119,199,192, 39, 96,107,120,252, 19,131,168, 56,187,101,202,253,148,130,222,
 56,153, 40,140,196,132,253, 50,140,202, 22,  6,204,  0, 34,210,118,  0, 13, 37,169, 78, 49, 37,177,170, 64,241, 47, 54,114,162,
 24, 79,166, 98, 79, 59,251,163, 99, 56,236, 50,253,125,219, 56,153,147, 83,252,134, 93, 53,233,104,  2,218, 26, 67, 11,  2, 85,
 87,116,237,125, 90,191,130, 59,  5,106,194,112, 98,255, 40, 52,206,  8, 88,156,227,118, 27,187, 26,188,249, 76, 96,225, 95, 87,
 53,150,218,137,143, 94,222,217, 16, 23,246, 27,154,196,135,105,218,165, 75, 59,179,102,113,224, 88, 49, 98,157,198, 54,218, 35,
 11,107, 59,203, 36,159,164,111, 41,126,139,203,127,255, 33, 86, 52,144,114,186,149, 35,163,207, 37,250, 48, 94,252, 64, 19,218,
 61,211, 16, 47,137,188, 68, 58,  1,219, 17, 52,218,165, 96, 88, 16, 12,105, 53,195, 31,141,231,199,107,165, 42,111, 70,115,233,
107,177,142,172,239,241,204,120, 75, 56,185,186, 18,110,244,127,153,215, 77,239,215,221, 22, 29, 69, 41,103, 29, 22, 26,203,186,
103, 40,201, 40, 23,180,105, 30, 63,241,233,139,101,211,213, 88,119, 38,145,151,249,132, 18,142,155,113,102,198,138,175, 97, 49,
108,255, 82,234,165,203,104,228,110, 46,176,230,243,138,183,114, 83, 14,166,240,137, 51,193,227, 22, 59,141,166, 77,163,148,143,
143,184, 31,102,129,235,179,171,190,172, 41,202,211, 43,154, 16,186,244,114,123,  9,112,168, 56, 62,110,211,105, 62,194,150,202,
154, 32, 86, 58,107, 80,240,104, 91,250, 50,220, 10,246, 16,234,160,124,236, 88, 48, 25,134, 31, 16,230, 40, 18, 23, 73,108,252,
 21, 94, 48,179,213, 95,165,105,  3,  9, 31, 14, 62,203, 46, 71, 94,233,200,194,213, 62,154,128,154, 55, 42,133, 40,221, 81, 17,
141, 54,198,171,198, 92, 20, 65,215,130, 85, 38,249,119,224, 68,183,224,180, 45,128,170, 38,215,196,175, 25,158, 52, 32, 65, 37,
184, 13,129,  8,  5,130,129,  1,212,135,234, 83,232,115,135, 34, 86,230,205, 71, 41, 35,145,227, 15,238,231, 22, 67,118, 12,183,
 65, 47,110,235,246,216, 62, 53, 95,179, 89,249,191,210,238, 80, 40,246, 72, 78, 82,249,252,148,124,158,248, 22,155,106,190, 94,
122, 51, 17,185,  4,155, 44,125,167,152,231,117,202,152, 35, 60,  0,150,237, 76, 45,190,100, 71, 50,218,111, 88,224, 40,153,245,
245,250,126,140,193, 53, 76,141,202,203,166,185, 18,135,202,227,122,187, 22,  4,124,113, 48,188,206,201,134, 42, 43,212,156,126,
254,242,128,207, 25,150,123,202, 74, 96,130, 98, 23,170, 53,171, 16,139,221, 37, 18,149,120,131,202,194,189,247,174, 33, 98,245,
 46, 40,187, 31,  6,250,202,228, 63, 75,185, 28,239,205,164, 35,148,219, 26,159,247,119,108,105,121,252,  5, 87,217,132, 28, 41,
254,140, 52,239,239, 21,164, 21,193,249,229,198,219, 92,148,252, 29,153, 99,211,  6,194,254,183,187, 81,166,  9,244,114, 10,187,
 47,144, 30, 98,153,181, 52,126, 54,  4,222,253,145,166,141, 29,104,  8, 57, 64, 33, 72, 34, 60,142,125, 51,158,111,155, 33, 79,
238, 42,150, 74, 62, 50, 99,104,101,228,156,  1,228,  0, 38, 21,195,136,161,235, 56,202,153,230,110,226,212, 28,129,150, 15,155,
227,142, 15,102, 15, 67,223, 54,165,209,218, 60,172, 32, 87,141, 87, 30,218,230,249, 53, 22, 35,145,175,219, 92, 94, 71,231,207,
213,  0, 30, 85,241,191,  5,128,169,106, 70,103,239, 92, 58, 78,138, 70,197, 99,187, 40,161,174,120,235,212, 95,103,130,216, 94,
233, 11,103,171,  2,  2,155,151, 24, 89, 60,142,238,174, 51, 52,117,141,210, 23,130,132, 19,172, 95,111,220,  6,234,165, 24, 39,
146,232,126,228,244,142, 76,135,171, 45, 74, 97,235, 18,192,202,183,160,234,218,176,192,219,101,248,187, 76,146, 38,149,172,114,
 65, 21,252,  6, 48, 79, 63,230, 64, 74,107, 84, 57,177,192, 76,175, 17, 78, 74,187, 62,118,210, 12, 24,235, 57, 66,185, 97, 21,
129,215, 32,214, 22,186,154,103, 96,  4,154,102, 85,135, 44, 70,250,255,227, 20, 71, 98,183,  3,159, 41,249, 24, 99,  6,163,134,
233, 85,211, 98,144,234, 54,244,119,230,234,183,164, 16,124,133,236,165, 62, 67,214, 77,206, 31, 31, 29, 55,236,192,130,  3, 90,
 96, 19,124,255,179,201,181, 16,201,238,156, 96,119,  0, 95,142,172,115, 43,190,199, 96,176,156,135,180, 66,115,179, 73, 52,245,
226,144, 86,144,147,125,210, 34,239, 45,122,231,176,110,167, 31,190,168, 63, 77, 86, 69,146,  0, 99,224,120,254,135, 66, 93,127,
186,167,125,231,170,206,251, 47,161,  9,207,153,229,200,236, 24, 13, 34,180, 10,  9,230,158,157,253, 85, 45,178,  5,211,154,173,
208,250, 45,  8,240,191,117,240,172, 16,171, 76,118,248, 26,155,244, 95,241,100,141, 82,117,211,  8,224,234, 84,161, 72, 41,205,
110, 33,201,235,154,227, 40, 78,173,196, 94,249, 58, 82, 38,  4, 59,145,189,166,226, 54, 31,125,133, 89,255, 15,213, 33, 78, 99,
231,222,221, 84, 47, 47,  0, 17, 54,163,183,200,244,124,152,182,185,229, 24, 15,139,130,235, 56,  2, 75,101, 64,227, 25,120,139,
118,250, 18, 92,116,210,213, 12,144,172,112, 62,126, 87,136,  9,193, 72, 85,240,  8, 63,216,100,242,164, 82,227,201,192, 45, 29,
 42, 43, 82,249,105, 60, 66,231, 15, 12,127,222, 18,173,185,171,194, 92,127,155,195,136,131, 55, 34,173,106,207,127,241, 66,208,
127, 83, 19, 83,  4,143,159,132,  6,110,224,252,191,250, 81, 68,234,167, 32,108, 64,146, 89,162,168, 27,215,188,209,114,103, 29,
201,174, 94,191,153,102,166, 51,189,250,148, 85,168,135,119, 40, 91, 37,228,216,209,214,143,237,249,113,171,232,183,226,179,148,
  6,194, 50, 17,155,146,171,132,  0,236,174, 70,254,  4,249, 33,164,175, 96,171,141,142, 76,243, 31,113,198, 39,187,190,124,218,
 71,255, 78,229, 84,101,141,201,122, 96,215,228, 39, 73,239,244,120,137, 68,  7,130,  7,  6,119,118, 62,241, 41,204,132,200, 66,
112,211,255,254,182, 19,204, 62, 34,150, 49, 45,182,103,203,214,130,209,175, 49,121,116, 88, 63,249,214,111, 22,115, 99,252,246,
151,149,115, 84, 74,240, 61,100,189,  5,229,235,213,216,192, 14,115, 27,167,250,212,151,200,251,123,191,  5,224,164,182,202,191,
154, 59,150, 33,243,119,139,145,148, 74,115,116,143,108,106, 32, 21, 97,163, 87,188,  2, 33,  0,204,120,217,138,235, 93,192,  7,
 58, 38, 81,154, 66,159, 26,251,144, 21,102,137, 35, 84,108, 15, 85,228,202, 67, 18,114,  2,152, 26,150, 84,123,158,  1,166, 54,
138,108, 58,105, 26,207,221,118, 70,167,199,167,155,151,220,120, 11,202, 53,  6,147,124,244,199, 35,185,127,172, 74,158, 93,142,
111, 47,255,182, 25,  3,244,133,  7, 83,252,107,171, 91,252,131,185,220,112,212,203,159,163, 13,119,114, 69, 97, 80, 49, 44,168,
 74, 56, 55,107,152, 38, 94,  8,213,176,255, 63,128,136, 28,200,188,252,243,109, 45,137,195,207,140,241, 62,167,190,147, 52,214,
 39, 83, 33,114, 35,144,235,147,125,104,254, 27,160, 99,141,238, 86,124,164, 84, 61,190,122,192,117,104,223,166,231,183, 73, 66,
123, 40, 24, 45,103,170,165, 44, 17, 96,240,197,138,167, 47, 40,100, 79, 80, 65,238,224,152,104,217, 96,252,187,177, 68,171,198,
 30,187,160,119, 75, 95,135,172,215,120, 66,221,206,181, 54,205, 56,183, 66,151,102,  8, 83,154,144,175, 84,  6,173,233,122,204,
180, 41,167,206,  7,183,220,  4,200,164,105,118,158,187,154, 36, 42, 46,130,250,  1, 20, 95, 22,103,  6,231,156, 11,128,254,237,
253,117, 40,164, 13,103,198,128,218, 62,207,194,158,221,252,212, 21, 48,220,127,103,128,203,160,202,145,102,  1,208, 64,248, 71,
165,123,120, 40,147,245, 22,194,104,  1, 32,195, 69,156,119,138,  9, 18,134,219,163,127,134,125,170,136,217,124,  1,196,176,153,
 69,135, 28, 35,101,211, 65, 31, 26, 26, 22,101, 96,  7, 90, 46, 25,220,247,190,185, 29,164, 38,245,250,125, 10, 28,153,192,164,
 81,134,126,190,127, 84, 36, 53,209,103,193,137,104, 32, 29,162, 45,171, 99, 37,204,241,224, 39,227,246, 45,106, 86, 54,  3,129,
 89,114, 19,217,137,156,174,197,183,193,236, 82, 92, 26,189,212,221,218,221,112, 53,155,215, 95,166, 86,218,137, 38,186,223,154,
 99, 63, 47,246, 12, 67, 25,144,252,157,109, 10,  4,141,203,200, 56, 88,141,123, 89,146, 75,190,154,180, 51, 51,194, 37,159,253,
226, 82,238, 28,235,198,199,153,193, 77,116,152, 46,204, 90, 24,138, 18, 80,205, 44, 99, 65,208,244,113, 91, 88, 15,229,206,215,
253,112, 40,178,158,174,220,113,145,243,186, 11, 30,178,143,206, 89, 27,168,175,212,209,208,126, 17, 30, 40,122,106,111,137,219,
127,157,154,189,163,168,121,220, 54,222, 60, 56,169, 53,178, 65,225,141,255,244, 61, 30,  2, 44,160,170,161,128,134, 97,  7, 33,
106,222,140,128, 23,209, 42,177,161,204,121,246,149,151,212,219,107,230,153,221,112,149,158, 96,155,110, 29,248,  7,249, 85,212,
215, 26,206,202,168, 49, 41, 15, 99, 77, 82,113,165, 12,150,  8,214,197, 20,160,200, 41,177,213, 64, 44,229,169,180, 49,169,168,
118,165, 30,122,200,  9, 50, 57,188,137,122, 34, 66, 44,186,142,215, 21, 34, 65,228,181, 11,173,105,249,138,124, 75,128, 91, 49,
164,170,250,255,237, 28, 63,204,146,219,228, 62,175,143,146, 19,113, 86,209,159, 15,104,195,193,154,112, 17,207,127,182,238, 59,
 46, 72,126,151, 50,187,161,187,213, 86,175,  9,208,204,254,218,102,118, 10,245,175,188, 34, 59,230, 57,101,125, 10,112, 76,220,
236,168, 16,102, 16,251,225,182,181, 21,202,185,185,186,240,205,114, 55,104,  9,171,249,140,114, 38, 66,177,249, 85, 36,177,100,
  9,210, 28, 40,187,151,201,107,148, 84, 63,154,242,105,130, 43, 72,151, 10,211,  7, 67, 48,243, 28,157, 64,206, 73,232, 96,145,
100,101,175,230,158,200, 18,219,109,253,116, 87,185,242,128,189,191,133,176,189, 25,221, 93,198,162, 40, 11, 30, 86,251, 33,172,
243,174, 53,140,185,156,141,128,133, 47,102,  9,206,216, 58, 42, 29,130, 14,196, 55,163,119,134,  7,233, 67,117,188,243,132,114,
219,200, 99, 11,188,243,  3, 35,247, 48, 56,234,119, 83,247,201,238,224,  0,212,236, 93,117, 80, 54,175,132,207, 88, 23,195,145,
170,243, 45,  6,116, 46,110, 41,126,235,204,  6,107,141, 15,180,241,122,135,219,243,176,134,126, 82, 19,212, 12,111, 52,202,224,
109,166, 63,131, 37,241, 84,191,114,215, 85,  0,144,111,229,169,159,208,222,222,143,231,158,250,109,175,179, 97, 90, 97,186, 74,
 33,236,152,196, 77,139,142,  0, 37,200,105, 27, 91,133,238,227, 46, 43,109,158, 86,235, 80,133,  7, 69, 22,118, 61,243,100, 17,
 29, 10,223,164,214, 32, 92, 20, 65,221,185,198,126,131,159,231,192,208, 50, 47,244, 27,244, 53,155, 19,189,  8,116, 24,194, 50,
100, 88,254, 81,165, 73, 12, 13,207, 88, 93,120, 50,138,  7,132,165, 47,181,109,192, 53, 28,  1, 21,170,  9,195, 99, 83,160, 40,
 26,135, 98, 37,132, 78, 65,118,195, 36, 95,155,190,124,  2, 17, 11, 56, 98, 69, 98, 85,113, 46, 59,252, 59,251, 64, 73,170,123,
184, 52, 93,171, 39,225,255, 87,237, 62,169,155,213,128, 67,152,167,247,183, 42,240, 90,198,196, 21, 52,234,136, 18, 70, 54,121,
122,228,227,137, 30, 87,233, 41, 57, 11, 88, 35,172,214, 88,186,185,162, 83, 72,146,127,139, 93,110,152,150,243,247,119, 68,166,
  8, 47, 32,241,157,185,122, 80, 14,142,241,229,  2,162, 24, 62,219, 47,207,111,242,237,231,251, 89,134, 27,133,193,245, 50,194,
199,177, 27,124,181,102, 29,255, 40,  3, 58,  3,141,166, 91,204,128, 87, 24,200,167,212,179, 27, 72, 37,152, 22,158,244,142, 25,
 92, 47, 29, 80,134,156,137,116, 17,208, 70,239,178,227,109,179, 42, 79,  5,105,221,105, 26,242,254,255, 52,143,205,  6, 96, 52,
116, 33,167, 93,136, 10, 69,228,205,163,183,215,142,196,104,100,184,229,236, 78,238, 36, 59,242, 21, 43, 82,134,103,249,167, 10,
111, 18,122,145, 59, 15, 43, 32, 10, 33,156, 57,178, 67,100, 57,151,208,215,232, 26, 17, 69, 79,229,181, 72, 92,183,190,124,212,
252,172,104,123, 73,215, 40,168,186,203, 68,205,136,  1, 63,210,199, 25,239,151, 33,190,239, 93,204, 43,172,134,199,206,105, 75,
164,199, 61,  5,218,232,240,192,167, 47, 45, 79,205,119,198,227,117,118,148,158,206,229,178, 61,189, 10,174, 30, 43,162,225,235,
 97,248, 40,193,196, 57,247,223, 40, 47,239,242,145,159,144, 84,100,200, 16, 80, 58,203,125,191, 20,  0, 72,208, 57,210,148,  5,
 77, 65,237,212, 79,  5, 31, 60,126,181,117,158,245,192,171, 29,121, 89,186, 98,145,144,177,150,123,105,172,195,241, 38,165, 86,
154,233,164, 79,177,188,  5, 94,169,212,210,133, 85,222,201, 84, 84, 42, 86,224, 23, 50,116,189,144, 87, 88,229, 89, 91, 74, 88,
 15, 31,  4, 11, 27, 92,107,189, 84, 91,185,189,190, 44, 65,156,159, 87,110,198,208,197, 62,104,117,230,191, 90, 99, 31,  5, 77,
137,121,117, 54,218,189, 57,248,190,152,140,188,121,182,255,100, 21,188, 70,  1,237,132,135, 74,224,156,150, 52,157, 17, 90, 52,
 86,107, 51, 68,183, 11,194,225, 30,118,  7, 55, 57,130,238,190,231, 91, 68,167,217,  3, 96,  4,241, 42, 85, 62, 39,  4, 90,173,
 62, 87,101, 13,131,187,172, 10,249,100,226,118,125, 80, 17, 94,173,215, 77, 66,204,179, 90, 82, 11, 46, 82,140,181,132,185, 26,
 28, 89,249,225, 28,224, 59, 44,174, 57,173,116, 33,234,135,161, 24,246,145, 80,183, 24,225,138,253, 19,  2, 84,104, 32, 85,117,
171,200, 90, 35, 87, 48, 66,204,156, 32,148,146,  6,230, 49, 33,166,177,115,191,242,105, 99,  3,120,110,228,  8,222,230,195,141,
228, 55,201, 88,143,100, 74,232,180,196,180,150,132, 78,132, 22,225,225,173,183,172,149,130, 65,101, 86,171,233, 76, 57,237,181,
 92,  6,174,206, 29,216,145, 66,103,139, 11, 46,181,205,127, 41,233,205, 38,253, 57, 12,225, 78,180,135,243, 57,185, 96,156,122,
214,254, 57,125,160,182,249,  9, 79,107, 80, 32,138, 84,140,151,214,129,255,126, 18,240,123, 80, 36, 95, 25,149,229, 88,137,  6,
239,144, 87,182,148,  2,137, 50,212, 29,173,206,188,192,196, 96,251, 91, 98, 55, 97, 29,104,230,130,232, 88, 65,157, 99, 35,247,
225, 73, 49,250,253,213,  3,212,248,205,170,244, 67,173,147,100,155,184,154,137,246, 81,165,209, 40,113, 52,171,169, 71,149,112,
249,181,236,114,143,201, 99, 38, 87,141, 63,148,115,115,163,213, 84,244,166,228,201,154,  1,143,164, 96,209,139,161, 88, 43,176,
 55, 57,250,141,193, 33,213,209, 85,116, 49,104, 18, 16, 93,180,205, 94, 86,181,161,177,166, 95,180, 92,205, 46,248,215,132,255,
 98,143, 92, 57,120, 21, 20, 51, 31,212,142, 85,104,152,125,147,  2, 29,190, 66,  1,117, 14,134,146,154,216,100, 83,166,217,126,
239, 50,  6,131,180, 35, 59,184, 74, 34,150,204, 34, 81,247, 27,223, 57, 44,219, 25, 66,253,236,128,214,166,221, 60,175,223,120,
251, 16,102, 53,146,249,223,222,225,  5,247,223,223, 65, 99, 65,163,189,132, 25,122,253,100,172, 53, 26,  2,221,125, 94,123,154,
 66, 29,208, 17,234,194,137,229, 90, 77,249, 19, 75, 30, 12, 62,114,101, 58,127, 43,198,254,253,172,186,  0,119,246,  1, 97,131,
138, 92,156,194,112, 82, 86,225, 51,158,191, 44,  4, 81, 97, 22, 14,196,107, 23, 35,251,111,124, 30,210,101, 48,193, 18,238, 88,
236,118,137,238,130, 73,205, 32, 14, 89, 75,140,  6,210,249, 91, 88,233,104, 50,150, 73, 95,142,236, 31,163,158,236, 38, 31, 33,
176,102, 63,141,200,114,148,196,246, 74,  9,201,176,226,118, 76,216, 10,215,215,169,188,194,162, 23,250,  2, 98,166, 47, 51,231,
 58, 41,220,159,146,108,147,230, 85,164, 60, 75, 63,150,222, 10,169, 87,197,226, 78, 71,120,243,164,157,118,205,112, 49, 30,198,
 22, 33,143,134,  6,214,185,108,119,240,130,  4,127,119, 98,128, 28,247,185, 79,106, 81,153,242,177,232,251,245,246,197,118, 35,
134,117, 52, 30,  6, 87,  3,211,157, 88,107, 93,197,115,116, 45, 58,245,177,120,120,207, 91,197,136,156,213, 29,218,196,117,177,
122, 95,126, 10, 66, 68,121,196,243,230,177, 17,230, 59, 45, 61,116,206,187,  1, 20,254,171,182, 25,111,149,105,130,230,248,217,
227,185,227,101,244,105,234,245,123,236,132,145, 29, 73,222, 77,111,151,168, 12,  8,116,157,124,179,199,240,211,175, 15, 66, 13,
238,215, 46, 45, 88,199, 73, 10,227,198,133, 39,121, 25,153,208,144, 72,250,234, 61,236,208,110, 27,102,178, 44,121, 22, 69,107,
170,118,163, 70, 27,177,244,167, 78,157, 40, 66,238,117,  2,153, 46, 32, 67,102, 21, 87,207,  1,  6,191, 17,241, 21, 28,144,204,
128, 25,125,  3,118, 82,180,222, 83, 82,156,160,196,142,128,165,100, 24,253, 89,211,222, 86, 82,167,161, 63, 91,160,  3,146, 49,
 12, 91,193,212,248,255, 35,219,107,100, 19,194,186, 47, 61,120, 63,107,140,253, 30, 55,249,161,195, 43, 91,212, 19, 88, 62, 80,
192,107,147,104,204,171,173,101,244, 33,238,111,203,147,151,120, 99,199, 28, 52,118,149, 18,213, 98, 32, 17,205,163, 78,200, 18,
 38,194,  2, 79,156,213,171,148,189, 39,  8,253, 72,138,213, 47,147,227,112, 76, 60,  9,217, 42, 88,189,  6,172,153,224,193,165,
 89,219, 72,  8,145, 71,219,142, 27,136,118, 79,140, 21,141,215, 74,225, 57,192,221,123,214, 28,233,215,246,223,206,254,250,221,
        };

        [Option("", tip = "files or dirs", required = true)]
        List<string> m_paths = new List<string>();
        [Option("unpkg", alias = "u", tip = "default=false。解码文件")]
        bool m_unpkg = false;
        [Option("keep", alias = "k", tip = "保持文件名，只改后缀。default=true")]
        bool m_keepFileName = true;
        [Option("origin", alias = "o", tip = "如果编码后的文件名太长，那就不编码。default=true")]
        bool m_useOriginNameWhen = true;

        public void Exec()
        {
            foreach (var p in m_paths)
            {
                WorkDFS(p);
            }
        }

        void WorkDFS(string path)
        {
            if (File.Exists(path))
            {
                if (m_unpkg)
                {
                    UnPkgSingleFile(path);
                }
                else
                {
                    PkgSingleFile(path);
                }
                // Console.Out.Flush();
            }
            else if (Directory.Exists(path))
            {
                foreach(var p in Directory.GetFileSystemEntries(path))
                {
                    WorkDFS(p);
                }
            }
            else
            {
                Console.WriteLine($"[error] invalid path: {path}");
            }
        }

        const string s_pkg_suffix = ".ompkg";
        const string s_tmp_suffix = ".omtmp";
        

        Regex m_reg = new Regex(@"^([-]?\d+)@([^/]+)$");
        bool TryParseFileName(string name, out string filename)
        {
            var match = m_reg.Match(name);
            if (match.Success)
            {
                var rest = match.Groups[2].Value;
                if ((rest.Length & 1) == 0 && Regex.IsMatch(rest, "^[0-9a-fA-F]+$"))
                {
                    var filenamebytes = Convert.FromHexString(rest);
                    var originname = Encoding.UTF8.GetString(filenamebytes);
                    filename = originname;
                }
                else
                {
                    filename = rest;
                }
            }
            else
            {
                filename = name;
            }
            return true;
        }

        void PkgSingleFile(string path)
        {
            if(File.Exists(path) == false)
            {
                Console.WriteLine($"[error] file not exist: {path}");
                return;
            }
            var filename = Path.GetFileName(path);
            var dir = Path.GetDirectoryName(path);
            if (filename.EndsWith(s_pkg_suffix))
            {
                return;// do nothing
            }
            if (filename.EndsWith(s_tmp_suffix))
            {
                Console.WriteLine($"[warn] tmp file: {path}");
                return;
            }
            
            string targetpath;
            if (m_keepFileName)
            {
                targetpath = $"{dir}/{filename}{s_pkg_suffix}";
            }
            else
            {
                var filenamebytes = Encoding.UTF8.GetBytes(filename);
                var filenamehex = Convert.ToHexString(filenamebytes);
                targetpath = $"{dir}/123@{filenamehex}{s_pkg_suffix}";
                if (filenamehex.Length > 128)
                {
                    Console.WriteLine($"[err] file name too long when encode filename, {path}");
                    if (m_useOriginNameWhen)
                    {
                        targetpath = $"{dir}/{filename}{s_pkg_suffix}";
                    }
                    else
                    {
                        return;
                    }
                }
            }

            Console.WriteLine($"[info] pkg file: {path}");
            // rename file to tmp
            var tmppath = $"{dir}/{filename}{s_tmp_suffix}";
            File.Move(path, tmppath);
            // encode file
            using(var fs = File.Open(tmppath, FileMode.Open, FileAccess.ReadWrite))
            {
                fs.Seek(0, SeekOrigin.Begin);
                var cnt = fs.Read(s_buffer, 0, s_buffer.Length);
                for(var i = 0; i < cnt; i++)
                {
                    s_buffer[i] = (byte)(s_buffer[i] ^ R123Keys[i]);
                }
                fs.Seek(0, SeekOrigin.Begin);
                fs.Write(s_buffer, 0, cnt);
            }
            // rename file to pkg
            File.Move(tmppath, targetpath);
        }

        void UnPkgSingleFile(string path)
        {
            if (File.Exists(path) == false)
            {
                Console.WriteLine($"[error] file not exist: {path}");
                return;
            }
            var filename = Path.GetFileName(path);
            var dir = Path.GetDirectoryName(path);
            if (filename.EndsWith(s_tmp_suffix))
            {
                Console.WriteLine($"[warn] tmp file: {path}");
                return;
            }
            if (filename.EndsWith(s_pkg_suffix) == false)
            {
                return;// do nothing
            }

            Console.Write($"[info] unpkg file: {path}");
            // analyse file name
            var onlyname = filename.Substring(0, filename.Length - s_pkg_suffix.Length);
            TryParseFileName(onlyname, out var originname);
            //var seds = onlyname.Split("@");
            //int seed = int.Parse(seds[0]);
            //var filenamebytes = Convert.FromHexString(seds[1]);
            //var originname = Encoding.UTF8.GetString(filenamebytes);
            Console.WriteLine($" ==> {originname}");
           
            // rename file to tmp
            var tmppath = $"{dir}/{originname}{s_pkg_suffix}{s_tmp_suffix}";
            File.Move(path, tmppath);
            // encode file
            using (var fs = File.Open(tmppath, FileMode.Open, FileAccess.ReadWrite))
            {
                fs.Seek(0, SeekOrigin.Begin);
                var cnt = fs.Read(s_buffer, 0, s_buffer.Length);
                for (var i = 0; i < cnt; i++)
                {
                    s_buffer[i] = (byte)(s_buffer[i] ^ R123Keys[i]);
                }
                fs.Seek(0, SeekOrigin.Begin);
                fs.Write(s_buffer, 0, cnt);
            }
            // rename file to pkg
            var targetpath = $"{dir}/{originname}";
            File.Move(tmppath, targetpath);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            //var rand = new Random(123);
            //for (var i = 0; i < 4096; i++)
            //{
            //    if (i % 32 == 0) Console.WriteLine();
            //    Console.Write($"{(byte)rand.Next(),3},");
            //}
            var cmd_parser = CmdLine.CreateCmdParser<TestCmd>();
            cmd_parser.Parse(args)?.Exec();
        }
    }
}
